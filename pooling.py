# -*- coding: utf-8 -*-
"""Pooling.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VoZCWUSCy2rYnG-Tpa1oy-bmjFmOuumT
"""

#Maximum and Average poling

from mxnet import np, npx
from mxnet.gluon import nn
#from d2l import mxnet as d2l

npx.set_np()

def pool2d(X, pool_size, mode='max'):
  p_h, p_w = pool_size
  Y = np.zeros((X.shape[0] - p_h + 1, X.shape[1] - p_w + 1))
  for i in range(Y.shape[0]):
    for j in range(Y.shape[1]):
      if mode == 'max':
        Y[i, j] = X[i:i + p_h, j:j + p_w].max()
      elif mode == 'avg':
        Y[i, j] = X[i:i + p_h, j:j + p_w].mean()
  return Y

#For maximum
X = np.array([[0.0, 1.0, 2.0], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0]])
pool2d(X, (2, 2))

#for average
pool2d(X, (2, 2), 'avg')

### Padding and Stride

X = np.arange(16, dtype=np.float32).reshape((1, 1, 4, 4))
X

pool2d = nn.MaxPool2D(3)
# Because there are no model parameters in the pooling layer, we do not need
# to call the parameter initialization function
pool2d(X)

pool2d = nn.MaxPool2D(3, padding=1, strides=2)  #The stride and padding can be manually specified
pool2d(X)

pool2d = nn.MaxPool2D((2, 3), padding=(0, 1), strides=(2, 3))
pool2d(X)

### Multiple Channels

X = np.concatenate((X, X + 1), 1)  #construct an input with 2 channels
X

#number of output channels is still 2 after pooling
pool2d = nn.MaxPool2D(3, padding=1, strides=2)
pool2d(X)

